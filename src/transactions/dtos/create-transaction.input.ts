import { InputType, Int, Field } from '@nestjs/graphql'
import { Extrinsic } from '@polkadot/types/interfaces'

@InputType()
export class CreateTransactionInput {
  @Field(() => String, { description: 'Transaction hash' })
  hash!: string

  @Field(() => String)
  blockHash!: string

  @Field(() => String)
  method!: string

  @Field(() => String)
  section!: string

  @Field(() => String, { description: 'Signature generated by the signer' })
  signature?: string

  @Field(() => String, { description: 'Address of the signer', nullable: true })
  signer?: string

  @Field(() => Int, { description: "Transaction's nonce", nullable: true })
  nonce?: number

  @Field(() => Int, { description: 'Extra gas paid for the Tx as tip', nullable: true })
  tip?: number

  static fromExtrinsic(ex: Extrinsic, blockHash: string): CreateTransactionInput {
    const { hash, nonce, signature, signer, tip } = ex
    const { method, section } = ex.method
    const txInput = new CreateTransactionInput()
    txInput.blockHash = blockHash
    txInput.hash = hash.toString()
    txInput.method = method
    txInput.section = section
    txInput.nonce = nonce.toNumber()
    txInput.signature = signature.toString()
    txInput.signer = signer.toString()
    txInput.tip = tip.toNumber()
    return txInput
  }
}
