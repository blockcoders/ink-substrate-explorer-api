import { InputType, Int, Field } from '@nestjs/graphql'
import { Extrinsic, Hash } from '@polkadot/types/interfaces'

@InputType()
export class CreateTransactionInput {
  @Field(() => String, { description: 'Transaction hash' })
  hash: string

  @Field(() => String)
  blockHash: string

  @Field(() => String)
  method: string

  @Field(() => String)
  section: string

  @Field(() => String, { description: 'Signature generated by the signer' })
  signature?: string

  @Field(() => String, { description: 'Address of the signer', nullable: true })
  signer?: string

  @Field(() => Int, { description: "Transaction's nonce", nullable: true })
  nonce?: number

  @Field(() => Int, { description: 'Extra gas paid for the Tx as tip', nullable: true })
  tip?: number

  constructor(extrinsic: Extrinsic, blockHash: Hash) {
    const { hash, nonce, signature, signer, tip } = extrinsic
    const { method, section } = extrinsic.method
    this.hash = hash.toString()
    this.blockHash = blockHash.toString()
    this.method = method
    this.section = section
    this.nonce = nonce.toNumber()
    this.signature = signature.toString()
    this.signer = signer.toString()
    this.tip = tip.toNumber()
  }
}
