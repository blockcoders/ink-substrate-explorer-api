import { Field, Int, ObjectType } from '@nestjs/graphql'
import { Event } from '../../events/entity/event.entity'
import {
  BaseEntity,
  Column,
  CreateDateColumn,
  Entity,
  Index,
  JoinColumn,
  ManyToOne,
  OneToMany,
  PrimaryColumn,
} from 'typeorm'
import { Block } from '../../blocks/entity/block.entity'

@ObjectType()
@Entity({ name: 'transactions' })
@Index(['signer'])
export class Transaction extends BaseEntity {
  @PrimaryColumn({
    unique: true,
  })
  @Field(() => String, { description: 'Transaction hash' })
  hash!: string

  @Column()
  @Field(() => String, { nullable: true })
  blockHash!: string

  @Column()
  @Field(() => String)
  method!: string

  @Column()
  @Field(() => String)
  section!: string

  @ManyToOne(() => Block, (block: Block) => block.transactions, { onDelete: 'SET NULL', nullable: true })
  @JoinColumn()
  block!: Block

  @OneToMany(() => Event, (event: Event) => event.transaction, { nullable: true })
  events!: Event[]

  @Column()
  @Field(() => String, { description: 'Signature generated by the signer' })
  signature?: string

  @Column()
  @Field(() => String, { description: 'Address of the signer', nullable: true })
  signer?: string

  @Column('int')
  @Field(() => Int, { description: "Transaction's nonce", nullable: true })
  nonce?: number

  @Column('int')
  @Field(() => Int, { description: 'Extra gas paid for the Tx as tip', nullable: true })
  tip?: number

  @CreateDateColumn({
    default: () => 'NOW()',
  })
  createdDate!: Date
  // TODO: add this
  //era?: GenericExtrinsicEra
  // We are not storing this for now
  //args: any
}
