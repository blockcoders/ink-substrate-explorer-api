import { Field, Int, ObjectType } from '@nestjs/graphql'
import { GenericExtrinsicEra } from '@polkadot/types'
import { Extrinsic, Hash } from '@polkadot/types/interfaces'
import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm'

@Entity()
@ObjectType()
export default class Transaction {
  @PrimaryGeneratedColumn('uuid')
  @Field(() => String, { description: 'Transaction hash' })
  hash: string

  @Column()
  @Field(() => String)
  blockHash: string

  @Column()
  @Field(() => String)
  method: string

  @Column()
  @Field(() => String)
  section: string

  @Column()
  @Field(() => String, { description: 'Signature generated by the signer' })
  signature?: string

  @Column()
  @Field(() => String, { description: 'Address of the signer', nullable: true })
  signer?: string

  // TODO: add this
  era?: GenericExtrinsicEra

  @Column('int')
  @Field(() => Int, { description: "Transaction's nonce", nullable: true })
  nonce?: number

  @Column('int')
  @Field(() => Int, { description: 'Extra gas paid for the Tx as tip', nullable: true })
  tip?: number

  // We are not storing this for now
  args: any

  constructor(extrinsic: Extrinsic, blockHash: Hash) {
    const {
      hash,
      era,
      nonce,
      signature,
      signer,
      tip,
      method: { method, args, section },
    } = extrinsic
    this.hash = hash.toString()
    this.blockHash = blockHash.toString()
    this.method = method
    this.section = section
    this.era = era
    this.nonce = nonce.toNumber()
    this.signature = signature.toString()
    this.signer = signer.toString()
    this.tip = tip.toNumber()
    this.args = args
  }
}
