import { Field, ObjectType } from '@nestjs/graphql'
import { Abi } from '@polkadot/api-contract'
import { Vec } from '@polkadot/types-codec'
import { EventMetadataLatest } from '@polkadot/types/interfaces'
import { Event as PolkadotEvent } from '@polkadot/types/interfaces'
import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm'
import { v4 as uuidv4 } from 'uuid'
import { FrameSystemPhase } from '../interfaces'

@Entity()
@ObjectType()
export default class Event {
  @PrimaryGeneratedColumn('uuid')
  @Field(() => String, { description: 'Event identifier generated by us' })
  id: string

  @Column()
  @Field(() => String, { description: 'Contract address from which the event was emitted' })
  contract: string

  @Column()
  @Field(() => String)
  index: string

  @Column()
  @Field(() => String)
  section: string

  @Column()
  @Field(() => String)
  method: string

  @Column()
  @Field(() => [String])
  topics: Vec<any>

  phase: FrameSystemPhase
  meta: EventMetadataLatest
  typeDef: any
  data: any

  constructor(event: PolkadotEvent, phase: FrameSystemPhase, topics: Vec<any>) {
    const { section, method, typeDef, meta, data, index } = event
    const [account_id] = data
    this.id = uuidv4()
    this.contract = account_id.toString()
    this.index = index.toHex()
    this.section = section
    this.method = method
    this.phase = phase
    this.topics = topics
    this.meta = meta
    this.typeDef = typeDef
    this.data = data
  }

  decode(abi: string | Record<string, unknown>) {
    const [, contract_evt] = this.data
    return new Abi(abi).decodeEvent(contract_evt)
  }

  static async find(contractAddress: string) {
    console.log('contractAddress %j', contractAddress)
  }
}
