import { Test, TestingModule } from '@nestjs/testing'
import { getRepositoryToken } from '@nestjs/typeorm'
import { Repository } from 'typeorm'
import { ContractsService } from './contracts.service'
import { Contract } from './entity/contract.entity'

const mockContracts = [
  {
    address: '5F73xwbK9jtcG1YY38DG5wVLm42y15pCa8zE79snVT5z9X1t',
    metada: '',
    createdDate: '2022-08-25 22:49:21.66883',
  },
]

describe('ContractService', () => {
  let service: ContractsService
  let repo: Repository<Contract>

  beforeAll(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        ContractsService,
        {
          provide: getRepositoryToken(Contract),
          useValue: {
            findOneBy: jest.fn().mockResolvedValue(mockContracts[0]),
            save: jest.fn().mockResolvedValue(true),
          },
        },
      ],
    }).compile()

    service = module.get<ContractsService>(ContractsService)
    repo = module.get<Repository<Contract>>(getRepositoryToken(Contract))
  })

  it('should be defined', () => {
    expect(service).toBeDefined()
  })

  describe('findOne', () => {
    it('should get a single contract', () => {
      const repoSpy = jest.spyOn(repo, 'findOneBy')
      expect(service.findOne(mockContracts[0].address)).resolves.toEqual(mockContracts[0])
      expect(repoSpy).toBeCalledWith({ address: mockContracts[0].address })
    })
  })

  describe('uploadMetadata', () => {
    it('should update the metada for a contract', () => {
      const base64metadata =
        ''

      expect(service.uploadMetadata(mockContracts[0] as any, base64metadata)).resolves.toEqual(true)
      expect(repo.save).toBeCalledTimes(1)
    })
  })
})
